/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.reactor_simulator.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class ReactorResult implements org.apache.thrift.TBase<ReactorResult, ReactorResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReactorResult");

  private static final org.apache.thrift.protocol.TField EFFICIENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("efficiency", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField OUTPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("output", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FUEL_FERTILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("fuelFertility", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField COOLANT_TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("coolantTemperature", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FUEL_HEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("fuelHeat", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REACTOR_HEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("reactorHeat", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REACTOR_LAYOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("reactorLayout", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReactorResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReactorResultTupleSchemeFactory());
  }

  public double efficiency; // required
  public double output; // required
  public double fuelFertility; // required
  public double coolantTemperature; // required
  public double fuelHeat; // required
  public double reactorHeat; // required
  public String reactorLayout; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EFFICIENCY((short)1, "efficiency"),
    OUTPUT((short)2, "output"),
    FUEL_FERTILITY((short)3, "fuelFertility"),
    COOLANT_TEMPERATURE((short)4, "coolantTemperature"),
    FUEL_HEAT((short)5, "fuelHeat"),
    REACTOR_HEAT((short)6, "reactorHeat"),
    REACTOR_LAYOUT((short)7, "reactorLayout");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EFFICIENCY
          return EFFICIENCY;
        case 2: // OUTPUT
          return OUTPUT;
        case 3: // FUEL_FERTILITY
          return FUEL_FERTILITY;
        case 4: // COOLANT_TEMPERATURE
          return COOLANT_TEMPERATURE;
        case 5: // FUEL_HEAT
          return FUEL_HEAT;
        case 6: // REACTOR_HEAT
          return REACTOR_HEAT;
        case 7: // REACTOR_LAYOUT
          return REACTOR_LAYOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EFFICIENCY_ISSET_ID = 0;
  private static final int __OUTPUT_ISSET_ID = 1;
  private static final int __FUELFERTILITY_ISSET_ID = 2;
  private static final int __COOLANTTEMPERATURE_ISSET_ID = 3;
  private static final int __FUELHEAT_ISSET_ID = 4;
  private static final int __REACTORHEAT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EFFICIENCY, new org.apache.thrift.meta_data.FieldMetaData("efficiency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTPUT, new org.apache.thrift.meta_data.FieldMetaData("output", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUEL_FERTILITY, new org.apache.thrift.meta_data.FieldMetaData("fuelFertility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COOLANT_TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("coolantTemperature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUEL_HEAT, new org.apache.thrift.meta_data.FieldMetaData("fuelHeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REACTOR_HEAT, new org.apache.thrift.meta_data.FieldMetaData("reactorHeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REACTOR_LAYOUT, new org.apache.thrift.meta_data.FieldMetaData("reactorLayout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReactorResult.class, metaDataMap);
  }

  public ReactorResult() {
  }

  public ReactorResult(
    double efficiency,
    double output,
    double fuelFertility,
    double coolantTemperature,
    double fuelHeat,
    double reactorHeat,
    String reactorLayout)
  {
    this();
    this.efficiency = efficiency;
    setEfficiencyIsSet(true);
    this.output = output;
    setOutputIsSet(true);
    this.fuelFertility = fuelFertility;
    setFuelFertilityIsSet(true);
    this.coolantTemperature = coolantTemperature;
    setCoolantTemperatureIsSet(true);
    this.fuelHeat = fuelHeat;
    setFuelHeatIsSet(true);
    this.reactorHeat = reactorHeat;
    setReactorHeatIsSet(true);
    this.reactorLayout = reactorLayout;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReactorResult(ReactorResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.efficiency = other.efficiency;
    this.output = other.output;
    this.fuelFertility = other.fuelFertility;
    this.coolantTemperature = other.coolantTemperature;
    this.fuelHeat = other.fuelHeat;
    this.reactorHeat = other.reactorHeat;
    if (other.isSetReactorLayout()) {
      this.reactorLayout = other.reactorLayout;
    }
  }

  public ReactorResult deepCopy() {
    return new ReactorResult(this);
  }

  @Override
  public void clear() {
    setEfficiencyIsSet(false);
    this.efficiency = 0.0;
    setOutputIsSet(false);
    this.output = 0.0;
    setFuelFertilityIsSet(false);
    this.fuelFertility = 0.0;
    setCoolantTemperatureIsSet(false);
    this.coolantTemperature = 0.0;
    setFuelHeatIsSet(false);
    this.fuelHeat = 0.0;
    setReactorHeatIsSet(false);
    this.reactorHeat = 0.0;
    this.reactorLayout = null;
  }

  public double getEfficiency() {
    return this.efficiency;
  }

  public ReactorResult setEfficiency(double efficiency) {
    this.efficiency = efficiency;
    setEfficiencyIsSet(true);
    return this;
  }

  public void unsetEfficiency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EFFICIENCY_ISSET_ID);
  }

  /** Returns true if field efficiency is set (has been assigned a value) and false otherwise */
  public boolean isSetEfficiency() {
    return EncodingUtils.testBit(__isset_bitfield, __EFFICIENCY_ISSET_ID);
  }

  public void setEfficiencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EFFICIENCY_ISSET_ID, value);
  }

  public double getOutput() {
    return this.output;
  }

  public ReactorResult setOutput(double output) {
    this.output = output;
    setOutputIsSet(true);
    return this;
  }

  public void unsetOutput() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_ISSET_ID);
  }

  /** Returns true if field output is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUT_ISSET_ID);
  }

  public void setOutputIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUT_ISSET_ID, value);
  }

  public double getFuelFertility() {
    return this.fuelFertility;
  }

  public ReactorResult setFuelFertility(double fuelFertility) {
    this.fuelFertility = fuelFertility;
    setFuelFertilityIsSet(true);
    return this;
  }

  public void unsetFuelFertility() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUELFERTILITY_ISSET_ID);
  }

  /** Returns true if field fuelFertility is set (has been assigned a value) and false otherwise */
  public boolean isSetFuelFertility() {
    return EncodingUtils.testBit(__isset_bitfield, __FUELFERTILITY_ISSET_ID);
  }

  public void setFuelFertilityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUELFERTILITY_ISSET_ID, value);
  }

  public double getCoolantTemperature() {
    return this.coolantTemperature;
  }

  public ReactorResult setCoolantTemperature(double coolantTemperature) {
    this.coolantTemperature = coolantTemperature;
    setCoolantTemperatureIsSet(true);
    return this;
  }

  public void unsetCoolantTemperature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COOLANTTEMPERATURE_ISSET_ID);
  }

  /** Returns true if field coolantTemperature is set (has been assigned a value) and false otherwise */
  public boolean isSetCoolantTemperature() {
    return EncodingUtils.testBit(__isset_bitfield, __COOLANTTEMPERATURE_ISSET_ID);
  }

  public void setCoolantTemperatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COOLANTTEMPERATURE_ISSET_ID, value);
  }

  public double getFuelHeat() {
    return this.fuelHeat;
  }

  public ReactorResult setFuelHeat(double fuelHeat) {
    this.fuelHeat = fuelHeat;
    setFuelHeatIsSet(true);
    return this;
  }

  public void unsetFuelHeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUELHEAT_ISSET_ID);
  }

  /** Returns true if field fuelHeat is set (has been assigned a value) and false otherwise */
  public boolean isSetFuelHeat() {
    return EncodingUtils.testBit(__isset_bitfield, __FUELHEAT_ISSET_ID);
  }

  public void setFuelHeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUELHEAT_ISSET_ID, value);
  }

  public double getReactorHeat() {
    return this.reactorHeat;
  }

  public ReactorResult setReactorHeat(double reactorHeat) {
    this.reactorHeat = reactorHeat;
    setReactorHeatIsSet(true);
    return this;
  }

  public void unsetReactorHeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REACTORHEAT_ISSET_ID);
  }

  /** Returns true if field reactorHeat is set (has been assigned a value) and false otherwise */
  public boolean isSetReactorHeat() {
    return EncodingUtils.testBit(__isset_bitfield, __REACTORHEAT_ISSET_ID);
  }

  public void setReactorHeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REACTORHEAT_ISSET_ID, value);
  }

  public String getReactorLayout() {
    return this.reactorLayout;
  }

  public ReactorResult setReactorLayout(String reactorLayout) {
    this.reactorLayout = reactorLayout;
    return this;
  }

  public void unsetReactorLayout() {
    this.reactorLayout = null;
  }

  /** Returns true if field reactorLayout is set (has been assigned a value) and false otherwise */
  public boolean isSetReactorLayout() {
    return this.reactorLayout != null;
  }

  public void setReactorLayoutIsSet(boolean value) {
    if (!value) {
      this.reactorLayout = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EFFICIENCY:
      if (value == null) {
        unsetEfficiency();
      } else {
        setEfficiency((Double)value);
      }
      break;

    case OUTPUT:
      if (value == null) {
        unsetOutput();
      } else {
        setOutput((Double)value);
      }
      break;

    case FUEL_FERTILITY:
      if (value == null) {
        unsetFuelFertility();
      } else {
        setFuelFertility((Double)value);
      }
      break;

    case COOLANT_TEMPERATURE:
      if (value == null) {
        unsetCoolantTemperature();
      } else {
        setCoolantTemperature((Double)value);
      }
      break;

    case FUEL_HEAT:
      if (value == null) {
        unsetFuelHeat();
      } else {
        setFuelHeat((Double)value);
      }
      break;

    case REACTOR_HEAT:
      if (value == null) {
        unsetReactorHeat();
      } else {
        setReactorHeat((Double)value);
      }
      break;

    case REACTOR_LAYOUT:
      if (value == null) {
        unsetReactorLayout();
      } else {
        setReactorLayout((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EFFICIENCY:
      return Double.valueOf(getEfficiency());

    case OUTPUT:
      return Double.valueOf(getOutput());

    case FUEL_FERTILITY:
      return Double.valueOf(getFuelFertility());

    case COOLANT_TEMPERATURE:
      return Double.valueOf(getCoolantTemperature());

    case FUEL_HEAT:
      return Double.valueOf(getFuelHeat());

    case REACTOR_HEAT:
      return Double.valueOf(getReactorHeat());

    case REACTOR_LAYOUT:
      return getReactorLayout();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EFFICIENCY:
      return isSetEfficiency();
    case OUTPUT:
      return isSetOutput();
    case FUEL_FERTILITY:
      return isSetFuelFertility();
    case COOLANT_TEMPERATURE:
      return isSetCoolantTemperature();
    case FUEL_HEAT:
      return isSetFuelHeat();
    case REACTOR_HEAT:
      return isSetReactorHeat();
    case REACTOR_LAYOUT:
      return isSetReactorLayout();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReactorResult)
      return this.equals((ReactorResult)that);
    return false;
  }

  public boolean equals(ReactorResult that) {
    if (that == null)
      return false;

    boolean this_present_efficiency = true;
    boolean that_present_efficiency = true;
    if (this_present_efficiency || that_present_efficiency) {
      if (!(this_present_efficiency && that_present_efficiency))
        return false;
      if (this.efficiency != that.efficiency)
        return false;
    }

    boolean this_present_output = true;
    boolean that_present_output = true;
    if (this_present_output || that_present_output) {
      if (!(this_present_output && that_present_output))
        return false;
      if (this.output != that.output)
        return false;
    }

    boolean this_present_fuelFertility = true;
    boolean that_present_fuelFertility = true;
    if (this_present_fuelFertility || that_present_fuelFertility) {
      if (!(this_present_fuelFertility && that_present_fuelFertility))
        return false;
      if (this.fuelFertility != that.fuelFertility)
        return false;
    }

    boolean this_present_coolantTemperature = true;
    boolean that_present_coolantTemperature = true;
    if (this_present_coolantTemperature || that_present_coolantTemperature) {
      if (!(this_present_coolantTemperature && that_present_coolantTemperature))
        return false;
      if (this.coolantTemperature != that.coolantTemperature)
        return false;
    }

    boolean this_present_fuelHeat = true;
    boolean that_present_fuelHeat = true;
    if (this_present_fuelHeat || that_present_fuelHeat) {
      if (!(this_present_fuelHeat && that_present_fuelHeat))
        return false;
      if (this.fuelHeat != that.fuelHeat)
        return false;
    }

    boolean this_present_reactorHeat = true;
    boolean that_present_reactorHeat = true;
    if (this_present_reactorHeat || that_present_reactorHeat) {
      if (!(this_present_reactorHeat && that_present_reactorHeat))
        return false;
      if (this.reactorHeat != that.reactorHeat)
        return false;
    }

    boolean this_present_reactorLayout = true && this.isSetReactorLayout();
    boolean that_present_reactorLayout = true && that.isSetReactorLayout();
    if (this_present_reactorLayout || that_present_reactorLayout) {
      if (!(this_present_reactorLayout && that_present_reactorLayout))
        return false;
      if (!this.reactorLayout.equals(that.reactorLayout))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ReactorResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ReactorResult typedOther = (ReactorResult)other;

    lastComparison = Boolean.valueOf(isSetEfficiency()).compareTo(typedOther.isSetEfficiency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEfficiency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.efficiency, typedOther.efficiency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput()).compareTo(typedOther.isSetOutput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output, typedOther.output);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuelFertility()).compareTo(typedOther.isSetFuelFertility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuelFertility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fuelFertility, typedOther.fuelFertility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoolantTemperature()).compareTo(typedOther.isSetCoolantTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoolantTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coolantTemperature, typedOther.coolantTemperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuelHeat()).compareTo(typedOther.isSetFuelHeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuelHeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fuelHeat, typedOther.fuelHeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReactorHeat()).compareTo(typedOther.isSetReactorHeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReactorHeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reactorHeat, typedOther.reactorHeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReactorLayout()).compareTo(typedOther.isSetReactorLayout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReactorLayout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reactorLayout, typedOther.reactorLayout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReactorResult(");
    boolean first = true;

    sb.append("efficiency:");
    sb.append(this.efficiency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output:");
    sb.append(this.output);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fuelFertility:");
    sb.append(this.fuelFertility);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coolantTemperature:");
    sb.append(this.coolantTemperature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fuelHeat:");
    sb.append(this.fuelHeat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reactorHeat:");
    sb.append(this.reactorHeat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reactorLayout:");
    if (this.reactorLayout == null) {
      sb.append("null");
    } else {
      sb.append(this.reactorLayout);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReactorResultStandardSchemeFactory implements SchemeFactory {
    public ReactorResultStandardScheme getScheme() {
      return new ReactorResultStandardScheme();
    }
  }

  private static class ReactorResultStandardScheme extends StandardScheme<ReactorResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReactorResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EFFICIENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.efficiency = iprot.readDouble();
              struct.setEfficiencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.output = iprot.readDouble();
              struct.setOutputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FUEL_FERTILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fuelFertility = iprot.readDouble();
              struct.setFuelFertilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COOLANT_TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.coolantTemperature = iprot.readDouble();
              struct.setCoolantTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FUEL_HEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fuelHeat = iprot.readDouble();
              struct.setFuelHeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REACTOR_HEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reactorHeat = iprot.readDouble();
              struct.setReactorHeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REACTOR_LAYOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reactorLayout = iprot.readString();
              struct.setReactorLayoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReactorResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EFFICIENCY_FIELD_DESC);
      oprot.writeDouble(struct.efficiency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_FIELD_DESC);
      oprot.writeDouble(struct.output);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUEL_FERTILITY_FIELD_DESC);
      oprot.writeDouble(struct.fuelFertility);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COOLANT_TEMPERATURE_FIELD_DESC);
      oprot.writeDouble(struct.coolantTemperature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUEL_HEAT_FIELD_DESC);
      oprot.writeDouble(struct.fuelHeat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REACTOR_HEAT_FIELD_DESC);
      oprot.writeDouble(struct.reactorHeat);
      oprot.writeFieldEnd();
      if (struct.reactorLayout != null) {
        oprot.writeFieldBegin(REACTOR_LAYOUT_FIELD_DESC);
        oprot.writeString(struct.reactorLayout);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReactorResultTupleSchemeFactory implements SchemeFactory {
    public ReactorResultTupleScheme getScheme() {
      return new ReactorResultTupleScheme();
    }
  }

  private static class ReactorResultTupleScheme extends TupleScheme<ReactorResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReactorResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEfficiency()) {
        optionals.set(0);
      }
      if (struct.isSetOutput()) {
        optionals.set(1);
      }
      if (struct.isSetFuelFertility()) {
        optionals.set(2);
      }
      if (struct.isSetCoolantTemperature()) {
        optionals.set(3);
      }
      if (struct.isSetFuelHeat()) {
        optionals.set(4);
      }
      if (struct.isSetReactorHeat()) {
        optionals.set(5);
      }
      if (struct.isSetReactorLayout()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetEfficiency()) {
        oprot.writeDouble(struct.efficiency);
      }
      if (struct.isSetOutput()) {
        oprot.writeDouble(struct.output);
      }
      if (struct.isSetFuelFertility()) {
        oprot.writeDouble(struct.fuelFertility);
      }
      if (struct.isSetCoolantTemperature()) {
        oprot.writeDouble(struct.coolantTemperature);
      }
      if (struct.isSetFuelHeat()) {
        oprot.writeDouble(struct.fuelHeat);
      }
      if (struct.isSetReactorHeat()) {
        oprot.writeDouble(struct.reactorHeat);
      }
      if (struct.isSetReactorLayout()) {
        oprot.writeString(struct.reactorLayout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReactorResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.efficiency = iprot.readDouble();
        struct.setEfficiencyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.output = iprot.readDouble();
        struct.setOutputIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fuelFertility = iprot.readDouble();
        struct.setFuelFertilityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coolantTemperature = iprot.readDouble();
        struct.setCoolantTemperatureIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fuelHeat = iprot.readDouble();
        struct.setFuelHeatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reactorHeat = iprot.readDouble();
        struct.setReactorHeatIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reactorLayout = iprot.readString();
        struct.setReactorLayoutIsSet(true);
      }
    }
  }

}

